git命令（通用Linux命令）
	初始化仓库 git  init
	主分支 master
	修改文件 vim  hello_git.txt
	读取文件 cat  hello_git.txt
	展示文件 ll
	展示末尾x行  tail -n  x
	查看工作区状态 git status

红色：文件有了，但处于工作区，没追踪过
添加到暂存区 git add

绿色：当前git已追踪，在暂存区，可以删除
	从暂存区删除git rm --cached  xxx(文件名)
	(只从暂存区删除，不删除工作区文件，相当于撤销add)

提交到本地库
 
	git commit -m "日志信息" xxx(文件名)
	提交完后查看status，为空。
	若显示nothing to commit, working tree clean，提交过了，文件没更新没修改

历史版本
	查看git引用版本信息 git  reflog，即可看到提交的版本号与文本信息（缩略版本号），能够看到并跟踪版本回滚信息
	查看详细日志信息 git  log，这个命令里可以看到提交信息（完整版本号）只能看到最新版本，无法看到版本回滚信息

修改文件
	修改文件后，status变为modefied，红色提示：文件修改未被添加暂存区
	add重新添加，提示信息变绿，commit重新提交，status为空
	
版本穿梭
	git reset --hard 版本号，指针指向哪个文件，vim操作和cat查看的就是哪个文件
	可以向前/后 穿越，可随时切换指针指向

tips：
	git按行维护文件，修改文件无法表达，只能转变为：修改那行删掉，再新增修改内容
	所以查看本地库，信息是有新增有删除
	本地库中，指针指向哪个版本，直接查看/编辑的就是哪个版本
	每次提交本地库，都写文本信息
	查看当前在哪个分支   ./.git/HEAD 记事本打开
	查看当前分支属于哪个版本  ./.git/refs/heads/master 记事本打开
	在哪个版本，查看到的分支所属版本信息就会相应改变
	git切换版本，提交的本地库内存中有不同的版本，底层是移动的HEAD指针

分支：
	副本，可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。
	一个分支就是一个单独的副本，分支底层其实也是指针的引用
	好处：同时并行推进多个功能的开发，提高开发效率，各个分支的开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响，失败的分支删除重新开始即可
	刚创建的新分支，会把当前主分支master的内容复制一份

分支操作
	创建分支 git branch
	查看分支 git branch -v
	切换分支 git checkout
	合并分支 git merge

在hot-update分支






